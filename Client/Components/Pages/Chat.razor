@page "/chat"
@attribute [Authorize]
@inject CustomAuthenticationStateProvider AuthenticationStateProvider
@inject HubService HubService
@inject IJSRuntime JS

<div class="container mt-4">
    <h1>Nhắn tin nhóm</h1>
    <hr>
    <ul id="messagesList" class="list-group mt-3 overflow-auto" style="height: 300px;">
        @foreach (var message in HubService.GetMessages())
        {
            <li class="list-group-item">@message</li>
        }
    </ul>

    <EditForm Model="@messageModel" OnValidSubmit="Send" class="mt-3">
        <div class="form-group">
                <InputText @bind-Value="messageModel.Message" size="50" class="form-control" />
        </div>
        <button type="submit" disabled="@(!HubService.IsConnected)" class="btn btn-primary mt-3">Send</button>
    </EditForm>
</div>

@code {
    private ChatMessageModel messageModel = new();
    private string? userName;

    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        userName = authState.User.Identity?.Name ?? "Anonymous";

        HubService.OnMessageReceived += OnMessageReceived;
    }

    private void OnMessageReceived(string message)
    {
        InvokeAsync(() =>
        {
            StateHasChanged();
            JS.InvokeVoidAsync("scrollToBottom");
        });
    }

    private async Task Send()
    {
        await HubService.SendMessage(userName, messageModel.Message);
        messageModel.Message = string.Empty;
    }

    public void Dispose()
    {
        HubService.OnMessageReceived -= OnMessageReceived;
    }
}

<script>
    function scrollToBottom() {
        var messagesList = document.getElementById("messagesList");
        messagesList.scrollTop = messagesList.scrollHeight;
    }
</script>
