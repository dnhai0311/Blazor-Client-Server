@if (IsVisible)
{
    <div class="modal fade show d-block">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">Change role cho @SelectedUser?.UserName</h5>
                    <button type="button" class="btn-close" @onclick="CloseModal"></button>
                </div>
                <div class="modal-body">
                    <label for="Role" class="form-label">Role:</label>
                    <InputSelect id="Role" class="form-control" @bind-Value="SelectedUser.RoleId">
                        @foreach (var role in Roles)
                        {
                            <option value="@role.Id">@role.RoleName</option>
                        }
                    </InputSelect>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-primary" @onclick="ChangeUserRole">Change Role</button>
                    <button type="button" class="btn btn-secondary" @onclick="CloseModal">Close</button>
                </div>
            </div>
        </div>
    </div>
}

@code {
    [Parameter]
    public bool IsVisible { get; set; }

    [Parameter]
    public User? SelectedUser { get; set; }

    [Parameter]
    public EventCallback<bool> OnClose { get; set; }

    [Parameter]
    public EventCallback<(int id, int roleId)> OnChangeRole { get; set; }

    [Inject]
    public required IRoleRepository RoleRepository { get; set; }

    public List<Role> Roles { get; set; } = new List<Role>();

    protected override async Task OnInitializedAsync()
    {
        Roles = await RoleRepository.GetAllRoles();
    }

    private void CloseModal()
    {
        OnClose.InvokeAsync(false);
    }

    private async Task ChangeUserRole()
    {
        if (SelectedUser != null)
        {
            await OnChangeRole.InvokeAsync((SelectedUser.Id, SelectedUser.RoleId));
        }
    }
}
